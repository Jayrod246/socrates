<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
/*
	This code was generated <#= System.DateTime.Now #>
*/

using Meyer.Socrates.Data.ActorEvents;
using Meyer.Socrates.Data;

namespace Meyer.Socrates.Services
{
	public static partial class VirtualActorEventRegistry
	{
		static VirtualActorEventRegistry()
        {
<#
	var dte = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
	var project = dte.Solution.FindProjectItem(this.Host.TemplateFile)
											 .ContainingProject as EnvDTE.Project;

	foreach(CodeClass c in GetCodeClasses(project.ProjectItems))
    {
		var attr = c.Attributes.Cast<CodeAttribute>().FirstOrDefault(a=>a.Name.StartsWith("ActorEventType"));
		if(attr != null)
        {
			WriteLine("\t\t\tRegister<{0}>({1});",c.Name,attr.Value);
        }
	}
#>
        }
	}
}
<#+
  public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
  {
      var ret = new List<EnvDTE.ProjectItem>();
      if (items == null) return ret;
      foreach(EnvDTE.ProjectItem item in items)
      {
        ret.Add(item);
        ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
      }
      return ret;
  }
#>
<#+
  public List<EnvDTE.CodeElement> GetCodeElementsRecursively(EnvDTE.CodeElements items)
  {
      var ret = new List<EnvDTE.CodeElement>();
      if (items == null) return ret;
      foreach(EnvDTE.CodeElement item in items)
      {
		  ret.Add(item);
      }
      return ret;
  }
#>

<#+
  public IEnumerable<EnvDTE.CodeClass> GetCodeClasses(EnvDTE.ProjectItems items)
  {
      foreach(CodeNamespace ns in GetProjectItemsRecursively(items).Where(p=>p.FileCodeModel!=null).SelectMany(p=>p.FileCodeModel.CodeElements.OfType<CodeNamespace>()))
      {
		  foreach(CodeClass codeClass in ns.Children.OfType<CodeClass>())
			  yield return codeClass;
      }
  }
#>